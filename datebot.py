import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
import json

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('dating_bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS profiles
                 (user_id INTEGER PRIMARY KEY,
                  name TEXT,
                  bio TEXT,
                  age INTEGER,
                  gender TEXT,
                  photo_id TEXT,
                  search_gender TEXT DEFAULT 'all')''')
    c.execute('''CREATE TABLE IF NOT EXISTS matches
                 (user1_id INTEGER,
                  user2_id INTEGER,
                  status TEXT,
                  PRIMARY KEY (user1_id, user2_id))''')
    c.execute('''CREATE TABLE IF NOT EXISTS messages
                 (sender_id INTEGER,
                  receiver_id INTEGER,
                  message TEXT,
                  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
PROFILE, BIO, AGE, GENDER, SEARCH_GENDER, PHOTOS, CHAT, MAIN_MENU, NAME = range(9)

def main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        ["üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π"],
        ["üíå –ú–æ–∏ –ø–∞—Ä—ã"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞"],
        ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"],
        [KeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://your-domain.com"))]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∏ –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Dating Bot!\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    )
    return NAME

async def profile_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ."""
    name = update.message.text.strip()
    
    if not name or len(name) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        return NAME
        
    context.user_data['name'] = name
    await update.message.reply_text(
        "‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:\n"
        "(–í–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å)"
    )
    return BIO

async def profile_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç."""
    bio = update.message.text.strip()
    
    if not bio or len(bio) < 10:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:"
        )
        return BIO
        
    context.user_data['bio'] = bio
    await update.message.reply_text(
        "üìÖ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 99:"
    )
    return AGE

async def profile_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª."""
    try:
        age = int(update.message.text)
        if age < 18 or age > 100:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100):")
            return AGE
        
        context.user_data['age'] = age
        keyboard = [
            [KeyboardButton("üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=reply_markup
        )
        return GENDER
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return AGE

async def profile_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    gender = update.message.text.lower()
    if "–º—É–∂—Å–∫–æ–π" not in gender and "–∂–µ–Ω—Å–∫–∏–π" not in gender:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:"
        )
        return GENDER
    
    context.user_data['gender'] = gender
    
    keyboard = [
        [KeyboardButton("üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π"), KeyboardButton("üåà –í—Å–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üéØ –ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?",
        reply_markup=reply_markup
    )
    return SEARCH_GENDER

async def search_gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ."""
    search_gender = update.message.text.lower()
    if "–º—É–∂—Å–∫–æ–π" in search_gender:
        context.user_data['search_gender'] = "–º—É–∂—Å–∫–æ–π"
    elif "–∂–µ–Ω—Å–∫–∏–π" in search_gender:
        context.user_data['search_gender'] = "–∂–µ–Ω—Å–∫–∏–π"
    else:
        context.user_data['search_gender'] = "all"
    
    await update.message.reply_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—Å!"
    )
    return PHOTOS

def save_profile(user_id, name, bio, age, gender, photo_id, search_gender):
    conn = sqlite3.connect('dating_bot.db')
    c = conn.cursor()
    c.execute('''INSERT OR REPLACE INTO profiles 
                 (user_id, name, bio, age, gender, photo_id, search_gender) 
                 VALUES (?, ?, ?, ?, ?, ?, ?)''',
              (user_id, name, bio, age, gender, photo_id, search_gender))
    conn.commit()
    conn.close()

def get_random_profile(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É."""
    conn = sqlite3.connect('dating_bot.db')
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    c.execute('SELECT search_gender FROM profiles WHERE user_id = ?', (user_id,))
    search_gender = c.fetchone()[0]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    if search_gender != 'all':
        c.execute('''SELECT * FROM profiles 
                     WHERE user_id != ? 
                     AND user_id NOT IN (SELECT user2_id FROM matches WHERE user1_id = ?)
                     AND gender = ?
                     ORDER BY RANDOM() LIMIT 1''', (user_id, user_id, search_gender))
    else:
        c.execute('''SELECT * FROM profiles 
                     WHERE user_id != ? 
                     AND user_id NOT IN (SELECT user2_id FROM matches WHERE user1_id = ?)
                     ORDER BY RANDOM() LIMIT 1''', (user_id, user_id))
    
    profile = c.fetchone()
    conn.close()
    return profile

async def profile_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if not update.message.photo:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—Å!"
        )
        return PHOTOS
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = ['name', 'bio', 'age', 'gender']
    missing_fields = [field for field in required_fields if field not in context.user_data]
    
    if missing_fields:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END
        
    photo_file = await update.message.photo[-1].get_file()
    photo_id = photo_file.file_id
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_profile(
            update.effective_user.id,
            context.user_data['name'],
            context.user_data['bio'],
            context.user_data['age'],
            context.user_data['gender'],
            photo_id,
            context.user_data.get('search_gender', 'all')
        )
        
        await update.message.reply_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üîç –ò—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n"
            "üíå –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –ø–∞—Ä—ã\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫\n"
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    except Exception as e:
        logger.error(f"Error saving profile: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–≤–∞–π–ø–æ–≤."""
    user_id = update.effective_user.id
    profile = get_random_profile(user_id)
    
    if not profile:
        await update.message.reply_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        )
        return
    
    keyboard = [
        [
            InlineKeyboardButton("üëé", callback_data=f"dislike_{profile[0]}"),
            InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_{profile[0]}"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_photo(
        profile[5],  # photo_id
        caption=f"üë§ {profile[1]}, {profile[3]}\n\n"  # name, age
                f"üìù {profile[2]}",  # bio
        reply_markup=reply_markup
    )

def get_matches(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∑–∞–∏–º–Ω—ã—Ö –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect('dating_bot.db')
    c = conn.cursor()
    c.execute('''
        SELECT p.* FROM profiles p
        INNER JOIN matches m1 ON p.user_id = m1.user2_id
        INNER JOIN matches m2 ON m1.user2_id = m2.user1_id
        WHERE m1.user1_id = ? AND m2.user2_id = ?
        AND m1.status = 'like' AND m2.status = 'like'
    ''', (user_id, user_id))
    matches = c.fetchall()
    conn.close()
    return matches

async def show_matches(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∑–∞–∏–º–Ω—ã—Ö –ø–∞—Ä."""
    user_id = update.effective_user.id
    matches = get_matches(user_id)
    
    if not matches:
        await update.message.reply_text(
            "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑–∞–∏–º–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π.\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–∫–∞—Ç—å!"
        )
        return MAIN_MENU
    
    await update.message.reply_text("üíå –í–∞—à–∏ –ø–∞—Ä—ã:")
    
    for match in matches:
        keyboard = [[InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data=f"chat_{match[0]}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_photo(
            match[5],  # photo_id
            caption=f"üë§ {match[1]}, {match[3]}\n\n"  # name, age
                    f"üìù {match[2]}",  # bio
            reply_markup=reply_markup
        )
    return MAIN_MENU

async def handle_like_dislike(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤."""
    query = update.callback_query
    action, target_user_id = query.data.split('_')
    user_id = update.effective_user.id
    
    try:
        if action == "like":
            save_match(user_id, int(target_user_id), "like")
            await query.answer("‚ù§Ô∏è –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            conn = sqlite3.connect('dating_bot.db')
            c = conn.cursor()
            c.execute('SELECT status FROM matches WHERE user1_id = ? AND user2_id = ?',
                     (int(target_user_id), user_id))
            match = c.fetchone()
            conn.close()
            
            if match and match[0] == "like":
                await query.message.reply_text(
                    "üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ!"
                )
        else:
            save_match(user_id, int(target_user_id), "dislike")
            await query.answer("üëé –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = get_random_profile(user_id)
        
        if not profile:
            await query.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
            )
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üëé", callback_data=f"dislike_{profile[0]}"),
                InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_{profile[0]}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_photo(
            profile[5],  # photo_id
            caption=f"üë§ {profile[1]}, {profile[3]}\n\n"  # name, age
                    f"üìù {profile[2]}",  # bio
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in handle_like_dislike: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [KeyboardButton("üë® –ò—Å–∫–∞—Ç—å –ø–∞—Ä–Ω–µ–π")],
        [KeyboardButton("üë© –ò—Å–∫–∞—Ç—å –¥–µ–≤—É—à–µ–∫")],
        [KeyboardButton("üåà –ò—Å–∫–∞—Ç—å –≤—Å–µ—Ö")],
        [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:",
        reply_markup=reply_markup
    )
    return SEARCH_GENDER

async def update_search_preferences(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞."""
    text = update.message.text.lower()
    user_id = update.effective_user.id
    
    if "–Ω–∞–∑–∞–¥" in text:
        await update.message.reply_text(
            "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    
    search_gender = "–º—É–∂—Å–∫–æ–π" if "–ø–∞—Ä–Ω–µ–π" in text else "–∂–µ–Ω—Å–∫–∏–π" if "–¥–µ–≤—É—à–µ–∫" in text else "all"
    
    conn = sqlite3.connect('dating_bot.db')
    c = conn.cursor()
    c.execute('UPDATE profiles SET search_gender = ? WHERE user_id = ?', (search_gender, user_id))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

def save_message(sender_id, receiver_id, message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect('dating_bot.db')
    c = conn.cursor()
    c.execute('INSERT INTO messages (sender_id, receiver_id, message) VALUES (?, ?, ?)',
              (sender_id, receiver_id, message))
    conn.commit()
    conn.close()

async def start_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = update.effective_user.id
    match_id = int(context.user_data.get('current_chat', 0))
    
    if not match_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    
    message = update.message.text
    if message == "‚Ü©Ô∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç":
        await update.message.reply_text(
            "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    
    save_message(user_id, match_id, message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    conn = sqlite3.connect('dating_bot.db')
    c = conn.cursor()
    c.execute('SELECT name FROM profiles WHERE user_id = ?', (user_id,))
    sender_name = c.fetchone()[0]
    conn.close()
    
    context.bot.send_message(
        chat_id=match_id,
        text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}:\n{message}"
    )
    
    return CHAT

async def handle_chat_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞."""
    query = update.callback_query
    action, match_id = query.data.split('_')
    
    if action == "chat":
        context.user_data['current_chat'] = match_id
        keyboard = [["‚Ü©Ô∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await query.message.reply_text(
            "üí¨ –ß–∞—Ç –Ω–∞—á–∞—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.",
            reply_markup=reply_markup
        )
        return CHAT
    
    return MAIN_MENU

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    try:
        data = json.loads(update.message.web_app_data.data)
        user_id = update.effective_user.id
        
        if data.get('action') == 'like':
            target_id = data.get('target_id')
            save_match(user_id, target_id, 'like')
            await update.message.reply_text("‚ù§Ô∏è –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")
        elif data.get('action') == 'dislike':
            target_id = data.get('target_id')
            save_match(user_id, target_id, 'dislike')
            await update.message.reply_text("üëé –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å")
    except Exception as e:
        logger.error(f"Error handling webapp data: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

def save_match(user1_id, user2_id, status):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect('dating_bot.db')
    c = conn.cursor()
    c.execute('''INSERT OR REPLACE INTO matches 
                 (user1_id, user2_id, status) 
                 VALUES (?, ?, ?)''',
              (user1_id, user2_id, status))
    conn.commit()
    conn.close()

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    application = Application.builder().token("7172788867:AAE-a9VMys3vnw52Es5ej7s1ssQMkas8IzM").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_name)],
            BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_bio)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_age)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_gender)],
            SEARCH_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_gender_handler)],
            PHOTOS: [MessageHandler(filters.PHOTO | filters.TEXT, profile_photo)],
            MAIN_MENU: [
                MessageHandler(filters.Regex("^üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π$"), show_profile),
                MessageHandler(filters.Regex("^üíå –ú–æ–∏ –ø–∞—Ä—ã$"), show_matches),
                MessageHandler(filters.Regex("^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞$"), settings_handler),
                MessageHandler(filters.Regex("^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å$"), start),
                MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data),
            ],
            CHAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, start_chat)],
        },
        fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_like_dislike, pattern="^(like|dislike)_"))
    application.add_handler(CallbackQueryHandler(handle_chat_button, pattern="^chat_"))
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()