import logging
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
import json
from dotenv import load_dotenv
import os
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

class DatabaseConnection:
    def __init__(self):
        self.connection = None

    def __enter__(self):
        self.connection = sqlite3.connect('dating_bot.db')
        return self.connection

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.connection:
            self.connection.commit()
            self.connection.close()

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    with DatabaseConnection() as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS profiles
                     (user_id INTEGER PRIMARY KEY,
                      name TEXT,
                      bio TEXT,
                      age INTEGER,
                      gender TEXT,
                      photo_id TEXT,
                      search_gender TEXT DEFAULT 'all')''')
        c.execute('''CREATE TABLE IF NOT EXISTS matches
                     (user1_id INTEGER,
                      user2_id INTEGER,
                      status TEXT,
                      PRIMARY KEY (user1_id, user2_id))''')
        c.execute('''CREATE TABLE IF NOT EXISTS messages
                     (sender_id INTEGER,
                      receiver_id INTEGER,
                      message TEXT,
                      timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
MENU, REGISTER_NAME, REGISTER_AGE, REGISTER_BIO, REGISTER_GENDER, REGISTER_PHOTO, SEARCH, SETTINGS, MATCHES, CHAT = range(10)

def main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        ["üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π"],
        ["üíå –ú–æ–∏ –ø–∞—Ä—ã"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞"],
        ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"],
        ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∏ –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    try:
        user = update.effective_user
        logger.info(f"User {user.id} ({user.first_name}) started the bot")
        
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}, –≤ Dating Bot!\n\n"
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n"
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
        )
        return REGISTER_NAME
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )
        return ConversationHandler.END

async def profile_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ."""
    name = update.message.text.strip()
    
    if not name or len(name) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
        return REGISTER_NAME
        
    context.user_data['name'] = name
    await update.message.reply_text(
        "‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:\n"
        "(–í–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å)"
    )
    return REGISTER_BIO

async def profile_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç."""
    bio = update.message.text.strip()
    
    if not bio or len(bio) < 10:
        await update.message.reply_text(
            "‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:"
        )
        return REGISTER_BIO
        
    context.user_data['bio'] = bio
    await update.message.reply_text(
        "üìÖ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 99:"
    )
    return REGISTER_AGE

async def profile_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª."""
    try:
        age = int(update.message.text)
        if age < 18 or age > 100:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100):")
            return REGISTER_AGE
        
        context.user_data['age'] = age
        keyboard = [
            [KeyboardButton("üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=reply_markup
        )
        return REGISTER_GENDER
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return REGISTER_AGE

async def profile_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ."""
    gender = update.message.text.lower()
    if "–º—É–∂—Å–∫–æ–π" not in gender and "–∂–µ–Ω—Å–∫–∏–π" not in gender:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:"
        )
        return REGISTER_GENDER
    
    context.user_data['gender'] = "–º—É–∂—Å–∫–æ–π" if "–º—É–∂—Å–∫–æ–π" in gender else "–∂–µ–Ω—Å–∫–∏–π"
    
    await update.message.reply_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—Å!"
    )
    return REGISTER_PHOTO

async def search_gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ."""
    search_gender = update.message.text.lower()
    if "–º—É–∂—Å–∫–æ–π" in search_gender:
        context.user_data['search_gender'] = "–º—É–∂—Å–∫–æ–π"
    elif "–∂–µ–Ω—Å–∫–∏–π" in search_gender:
        context.user_data['search_gender'] = "–∂–µ–Ω—Å–∫–∏–π"
    else:
        context.user_data['search_gender'] = "all"
    
    await update.message.reply_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—Å!"
    )
    return REGISTER_PHOTO

async def save_profile(user_id, name, bio, age, gender, photo_id, search_gender):
    with DatabaseConnection() as conn:
        c = conn.cursor()
        c.execute('''INSERT OR REPLACE INTO profiles 
                     (user_id, name, bio, age, gender, photo_id, search_gender) 
                     VALUES (?, ?, ?, ?, ?, ?, ?)''',
                  (user_id, name, bio, age, gender, photo_id, search_gender))

async def get_random_profile(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É."""
    with DatabaseConnection() as conn:
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('SELECT search_gender FROM profiles WHERE user_id = ?', (user_id,))
        result = c.fetchone()
        if not result:
            return None
            
        search_gender = result[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        if search_gender != 'all':
            c.execute('''SELECT * FROM profiles 
                         WHERE user_id != ? 
                         AND user_id NOT IN (SELECT user2_id FROM matches WHERE user1_id = ?)
                         AND gender = ?
                         ORDER BY RANDOM() LIMIT 1''', (user_id, user_id, search_gender))
        else:
            c.execute('''SELECT * FROM profiles 
                         WHERE user_id != ? 
                         AND user_id NOT IN (SELECT user2_id FROM matches WHERE user1_id = ?)
                         ORDER BY RANDOM() LIMIT 1''', (user_id, user_id))
        
        return c.fetchone()

async def profile_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if not update.message.photo:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –≤–∞—Å!"
        )
        return REGISTER_PHOTO
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_fields = ['name', 'bio', 'age', 'gender']
    missing_fields = [field for field in required_fields if field not in context.user_data]
    
    if missing_fields:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return ConversationHandler.END
        
    photo_id = update.message.photo[-1].file_id
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await save_profile(
            update.effective_user.id,
            context.user_data['name'],
            context.user_data['bio'],
            context.user_data['age'],
            context.user_data['gender'],
            photo_id,
            context.user_data.get('search_gender', 'all')
        )
        
        await update.message.reply_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üîç –ò—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n"
            "üíå –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –ø–∞—Ä—ã\n"
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫\n"
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            reply_markup=main_menu_keyboard()
        )
        return MENU
    except Exception as e:
        logger.error(f"Error saving profile: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–≤–∞–π–ø–æ–≤."""
    user_id = update.effective_user.id
    profile = await get_random_profile(user_id)
    
    if not profile:
        await update.message.reply_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        )
        return
    
    keyboard = [
        [
            InlineKeyboardButton("üëé", callback_data=f"dislike_{profile[0]}"),
            InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_{profile[0]}"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_photo(
        profile[5],  # photo_id
        caption=f"üë§ {profile[1]}, {profile[3]}\n\n"  # name, age
                f"üìù {profile[2]}",  # bio
        reply_markup=reply_markup
    )

async def get_matches(user_id):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∑–∞–∏–º–Ω—ã—Ö –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    with DatabaseConnection() as conn:
        c = conn.cursor()
        c.execute('''
            SELECT p.* FROM profiles p
            INNER JOIN matches m1 ON p.user_id = m1.user2_id
            INNER JOIN matches m2 ON m1.user2_id = m2.user1_id
            WHERE m1.user1_id = ? AND m2.user2_id = ?
            AND m1.status = 'like' AND m2.status = 'like'
        ''', (user_id, user_id))
        matches = c.fetchall()
    return matches

async def show_matches(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º—ç—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    matches = await get_matches(user_id)
    
    if not matches:
        keyboard = [[KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑–∞–∏–º–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π.\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–∫–∞—Ç—å, –∏ –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤—è—Ç—Å—è!",
            reply_markup=reply_markup
        )
    else:
        keyboard = []
        for match in matches:
            keyboard.append([KeyboardButton(f"üíå –ß–∞—Ç —Å {match[1]}")])  # match[1] —ç—Ç–æ –∏–º—è
        keyboard.append([KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        matches_text = "üíå –í–∞—à–∏ –ø–∞—Ä—ã:\n\n"
        for match in matches:
            matches_text += f"üë§ {match[1]}, {match[3]}\n"  # –ò–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç
        
        await update.message.reply_text(matches_text, reply_markup=reply_markup)
    
    return MATCHES

async def handle_like_dislike(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤."""
    query = update.callback_query
    await query.answer()  # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∑–∞–≤–∏—Å–∞–Ω–∏—è
    
    if query.data == "return_menu":
        await query.message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_keyboard()
        )
        return MENU
        
    action, target_user_id = query.data.split('_')
    user_id = update.effective_user.id
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º action –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        status = "like" if action == "like" else "dislike"
        success = await save_match(user_id, int(target_user_id), status)
        
        if not success:
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=main_menu_keyboard()
            )
            return MENU
        
        if status == "like":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            with DatabaseConnection() as conn:
                c = conn.cursor()
                c.execute('SELECT status FROM matches WHERE user1_id = ? AND user2_id = ?',
                         (int(target_user_id), user_id))
                match = c.fetchone()
            
            if match and match[0] == "like":
                await query.message.reply_text(
                    "üéâ –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ!"
                )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = await get_random_profile(user_id)
        
        if not profile:
            await query.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                reply_markup=main_menu_keyboard()
            )
            return MENU
        
        keyboard = [
            [
                InlineKeyboardButton("üëé", callback_data=f"dislike_{profile[0]}"),
                InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_{profile[0]}"),
            ],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="return_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_photo(
            profile[5],  # photo_id
            caption=f"üë§ {profile[1]}, {profile[3]}\n\n"  # name, age
                    f"üìù {profile[2]}",  # bio
            reply_markup=reply_markup
        )
        return SEARCH
        
    except Exception as e:
        logger.error(f"Error in handle_like_dislike: {e}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=main_menu_keyboard()
        )
        return MENU

async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [KeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞")],
        [KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=reply_markup
    )
    return SETTINGS

async def update_search_preferences(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞."""
    text = update.message.text.lower()
    user_id = update.effective_user.id
    
    if "–Ω–∞–∑–∞–¥" in text:
        await update.message.reply_text(
            "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_keyboard()
        )
        return MENU
    
    search_gender = "–º—É–∂—Å–∫–æ–π" if "–ø–∞—Ä–Ω–µ–π" in text else "–∂–µ–Ω—Å–∫–∏–π" if "–¥–µ–≤—É—à–µ–∫" in text else "all"
    
    with DatabaseConnection() as conn:
        c = conn.cursor()
        c.execute('UPDATE profiles SET search_gender = ? WHERE user_id = ?', (search_gender, user_id))
    
    await update.message.reply_text(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=main_menu_keyboard()
    )
    return MENU

async def save_message(sender_id, receiver_id, message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    with DatabaseConnection() as conn:
        c = conn.cursor()
        c.execute('INSERT INTO messages (sender_id, receiver_id, message) VALUES (?, ?, ?)',
                  (sender_id, receiver_id, message))

async def start_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = update.effective_user.id
    match_id = int(context.user_data.get('current_chat', 0))
    
    if not match_id:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω",
            reply_markup=main_menu_keyboard()
        )
        return MENU
    
    message = update.message.text
    if message == "‚Ü©Ô∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç":
        await update.message.reply_text(
            "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
            reply_markup=main_menu_keyboard()
        )
        return MENU
    
    await save_message(user_id, match_id, message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    with DatabaseConnection() as conn:
        c = conn.cursor()
        c.execute('SELECT name FROM profiles WHERE user_id = ?', (user_id,))
        sender_name = c.fetchone()[0]
    
    await context.bot.send_message(
        chat_id=match_id,
        text=f"üíå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}:\n{message}"
    )
    
    return CHAT

async def handle_chat_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–∞."""
    text = update.message.text
    
    if text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await handle_main_menu(update, context)
    
    if text.startswith("üíå –ß–∞—Ç —Å "):
        target_name = text.replace("üíå –ß–∞—Ç —Å ", "")
        with DatabaseConnection() as conn:
            c = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
            c.execute('SELECT user_id FROM profiles WHERE name = ?', (target_name,))
            result = c.fetchone()
        
        if result:
            target_id = result[0]
            context.user_data['chat_with'] = target_id
            keyboard = [[KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"üíå –ß–∞—Ç —Å {target_name}\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä.",
                reply_markup=reply_markup
            )
            return CHAT
    
    return MATCHES

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    query = update.message.text
    
    if "üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π" in query:
        profile = await get_random_profile(update.effective_user.id)
        if profile:
            keyboard = [
                [
                    InlineKeyboardButton("üëé –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="dislike"),
                    InlineKeyboardButton("‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è", callback_data="like")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            caption = f"üë§ {profile[1]}, {profile[3]}\n\n{profile[2]}"
            await update.message.reply_photo(
                photo=profile[5],
                caption=caption,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
            )
    
    elif "üíå –ú–æ–∏ –ø–∞—Ä—ã" in query:
        await show_matches(update, context)
    
    elif "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞" in query:
        await settings_handler(update, context)
    
    elif "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" in query:
        await show_my_profile(update, context)
    
    elif "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in query:
        await show_statistics(update, context)
    
    elif "üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" in query:
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        webapp_url = os.getenv('WEBAPP_URL', 'http://localhost:5000')
        keyboard = [[InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=webapp_url))]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=reply_markup
        )
    
    elif "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" in query:
        await update.message.reply_text(
            "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )

async def handle_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ."""
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä":
        del context.user_data['chat_with']
        return await show_matches(update, context)
    
    if 'chat_with' in context.user_data:
        receiver_id = context.user_data['chat_with']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        await save_message(user_id, receiver_id, text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        with DatabaseConnection() as conn:
            c = conn.cursor()
            c.execute('SELECT name FROM profiles WHERE user_id = ?', (receiver_id,))
            receiver_name = c.fetchone()[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=receiver_id,
                text=f"üíå –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{text}"
            )
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except Exception as e:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
        return CHAT
    
    return await show_matches(update, context)

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    profile = await get_random_profile(update.effective_user.id)
    
    if not profile:
        await update.message.reply_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
        )
        return MENU
    
    keyboard = [
        [
            InlineKeyboardButton("üëé", callback_data=f"dislike_{profile[0]}"),
            InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_{profile[0]}")
        ],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="return_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_photo(
        profile[5],  # photo_id
        caption=f"üë§ {profile[1]}, {profile[3]}\n\n"  # name, age
                f"üìù {profile[2]}",  # bio
        reply_markup=reply_markup
    )
    return SEARCH

async def dislike_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = update.effective_user.id
    await save_match(user_id, context.user_data.get('current_profile_id'), "dislike")
    return await search(update, context)

async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_keyboard()
    )
    return MENU

async def change_search_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [KeyboardButton("üë® –ò—Å–∫–∞—Ç—å –ø–∞—Ä–Ω–µ–π")],
        [KeyboardButton("üë© –ò—Å–∫–∞—Ç—å –¥–µ–≤—É—à–µ–∫")],
        [KeyboardButton("üåà –ò—Å–∫–∞—Ç—å –≤—Å–µ—Ö")],
        [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å:",
        reply_markup=reply_markup
    )
    return SETTINGS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )
    return MENU

async def save_match(user1_id, user2_id, status):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–∞–π–ø–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with DatabaseConnection() as conn:
            c = conn.cursor()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
            c.execute('SELECT status FROM matches WHERE user1_id = ? AND user2_id = ?', 
                     (user1_id, user2_id))
            existing = c.fetchone()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                c.execute('''UPDATE matches 
                           SET status = ? 
                           WHERE user1_id = ? AND user2_id = ?''', 
                         (status, user1_id, user2_id))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                c.execute('''INSERT INTO matches (user1_id, user2_id, status)
                           VALUES (?, ?, ?)''', (user1_id, user2_id, status))
            return True
    except Exception as e:
        logger.error(f"Error in save_match: {e}")
        return False

async def show_my_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    
    with DatabaseConnection() as conn:
        c = conn.cursor()
        c.execute('SELECT * FROM profiles WHERE user_id = ?', (user_id,))
        profile = c.fetchone()
    
    if not profile:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return
    
    await update.message.reply_photo(
        profile[5],  # photo_id
        caption=f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"üìù –ò–º—è: {profile[1]}\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {profile[3]}\n"
                f"üë§ –ü–æ–ª: {profile[4]}\n"
                f"üìñ –û —Å–µ–±–µ: {profile[2]}\n"
                f"üîç –ò—â—É: {profile[6]}",
        reply_markup=main_menu_keyboard()
    )

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    
    with DatabaseConnection() as conn:
        c = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('SELECT COUNT(*) FROM matches WHERE user1_id = ? AND status = "like"', (user_id,))
        likes_given = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∑–ª–∞–π–∫–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        c.execute('SELECT COUNT(*) FROM matches WHERE user1_id = ? AND status = "dislike"', (user_id,))
        dislikes_given = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        c.execute('SELECT COUNT(*) FROM matches WHERE user2_id = ? AND status = "like"', (user_id,))
        likes_received = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π
        c.execute('''
            SELECT COUNT(*) FROM matches m1
            JOIN matches m2 ON m1.user1_id = m2.user2_id AND m1.user2_id = m2.user1_id
            WHERE m1.user1_id = ? AND m1.status = "like" AND m2.status = "like"
        ''', (user_id,))
        mutual_likes = c.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        c.execute('SELECT COUNT(*) FROM messages WHERE sender_id = ?', (user_id,))
        messages_sent = c.fetchone()[0]
        
        c.execute('SELECT COUNT(*) FROM messages WHERE receiver_id = ?', (user_id,))
        messages_received = c.fetchone()[0]
    
    stats_text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚ù§Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: {likes_given}\n"
        f"üëé –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∏–∑–ª–∞–π–∫–æ–≤: {dislikes_given}\n"
        f"‚ù§Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ª–∞–π–∫–æ–≤: {likes_received}\n"
        f"üíï –í–∑–∞–∏–º–Ω—ã—Ö —Å–∏–º–ø–∞—Ç–∏–π: {mutual_likes}\n"
        f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_sent}\n"
        f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_received}"
    )
    
    await update.message.reply_text(stats_text, reply_markup=main_menu_keyboard())

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MENU: [
                MessageHandler(filters.Regex('^üîç –ü–æ–∏—Å–∫ –ª—é–¥–µ–π$'), search),
                MessageHandler(filters.Regex('^üíå –ú–æ–∏ –ø–∞—Ä—ã$'), show_matches),
                MessageHandler(filters.Regex('^‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞$'), settings_handler),
                MessageHandler(filters.Regex('^üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$'), show_my_profile),
                MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), show_statistics),
                MessageHandler(filters.Regex('^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å$'), start),
            ],
            REGISTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_name)],
            REGISTER_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_age)],
            REGISTER_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_bio)],
            REGISTER_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, profile_gender)],
            REGISTER_PHOTO: [MessageHandler(filters.PHOTO, profile_photo)],
            SEARCH: [
                CallbackQueryHandler(handle_like_dislike),
                MessageHandler(filters.Regex('^‚Ü©Ô∏è –í –º–µ–Ω—é$'), return_to_menu),
            ],
            SETTINGS: [
                MessageHandler(filters.Regex('^üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞$'), change_search_gender),
                MessageHandler(filters.Regex('^(üë® –ò—Å–∫–∞—Ç—å –ø–∞—Ä–Ω–µ–π|üë© –ò—Å–∫–∞—Ç—å –¥–µ–≤—É—à–µ–∫|üåà –ò—Å–∫–∞—Ç—å –≤—Å–µ—Ö)$'), update_search_preferences),
                MessageHandler(filters.Regex('^‚Ü©Ô∏è –ù–∞–∑–∞–¥$'), return_to_menu),
            ],
            MATCHES: [
                MessageHandler(filters.Regex('^üíå –ß–∞—Ç —Å .*$'), handle_chat_button),
                MessageHandler(filters.Regex('^‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), return_to_menu),
            ],
            CHAT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_chat_message),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("Bot started...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nBot stopped by user")
    except Exception as e:
        print(f"Error occurred: {e}")
        raise